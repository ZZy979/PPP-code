第2章
//  在一行中的//之后的内容都是注释。
<<  C++的左移/输出运算符。
C++  一种编程语言。
注释(comment)  用于描述程序做的事情，帮助人们读懂代码，会被编译器忽略。
编译器(compiler)  将源代码转换为目标代码的程序。
编译时错误(compile-time error)  由编译器发现的错误。
cout  C++标准输出流。
可执行程序(executable)  可以在计算机上运行的程序。
函数(function)  一个指令序列，可以使用给定参数调用，可能返回一个值。
头文件(header)  包含声明的文件，其中的声明用于在程序的不同部分之间共享接口，通常有后缀.h。
集成开发环境(IDE)  包括一个具有语法高亮、自动补全等功能的代码编辑器，以及其他编译、调试、运行代码功能的工具集合。
#include  用于将头文件的内容包含进当前源文件的指令。
库(library)  一组类型、函数、类等，实现了一组功能，可能被很多程序所使用。
链接器(linker)  将目标代码和库文件组合在一起生成可执行程序的程序。
main()  C++程序的入口函数。
目标代码(object code)  编译器的输出、链接器的输入。
输出(output)  计算生成的值，例如函数返回值或写到屏幕上的一行字符。
程序(program)  足够完整、可以被计算机执行的代码（可能与其相关联的数据一起）。
源代码(source code)  程序员编写的代码。
语句(statement)  函数中控制执行流程的基本单元，例如if语句、for语句、while语句、do-while语句、switch语句、表达式语句、声明等。

第3章
赋值(assignment)  给对象一个新值。
cin  C++标准输入流。
连接(concatenation)  将两个字符串拼接在一起。
转换(conversion)  将一个类型的值转换为另一个类型。
声明(declaration)  命名一个对象的语句。
递减(decrement)  将变量的值减1。
定义(definition)  为一个对象分配内存空间的声明。
递增(increment)  将变量的值加1。
初始化(initialization)  给对象一个初值。
名字(name)  以字母开头、只包含字母、数字和下划线的字符序列。
缩小(narrowing)  从占用字节数较多、范围较大的类型转换为占用字节数较少、范围较小的类型。
对象(object)  用来保存一个指定类型的值的一些内存单元。
运算(operation)  对对象执行的某种动作，例如相加、取模、比较、输入/输出、函数调用等。
运算符(operator)  表示内置运算的符号，例如+、*、&等。
类型(type)  定义一组可能的值和一组操作，例如内置类型（int、double等），自定义类型。
类型安全(type safety)  当一个程序仅按照一个对象的类型的规则使用该对象时，该程序是类型安全的。
值(value)  内存中根据类型来解释的一组比特位。
变量(variable)  一个命名的对象。

第4章
抽象(abstraction)  对某个事物的描述，隐藏实现细节，指定通用接口。
begin()  标准库容器（例如vector）返回开始位置迭代器的成员函数。
计算(computation)  某段代码的执行过程，一般接受一些输入，产生一些输出。
条件语句(conditional statement)  if语句或switch语句。
声明(declaration)  变量：命名一个对象的语句；函数：指定返回值类型、函数名和参数表的语句。
定义(definition)  变量：为一个对象分配内存空间的声明；函数：指定返回值类型、函数名、参数表和函数体的语句。
分治(divide and conquer)  将一个大的问题分为几个小问题分别解决。
else  if语句的第二个分支部分。
end()  标准库容器返回结束位置迭代器的成员函数。
表达式(expression)  运算符和名字的组合，产生一个值。
for语句(for-statement)  指定初始化、循环条件和递增操作的循环语句。
基于范围的for语句(range-for-statement)  直接遍历一系列元素的循环语句。
函数(function)  一个指令序列，可以使用给定参数调用，可能返回一个值。
if语句(if-statement)  根据条件在两个分支之间选择的语句。
递增(increment)  将变量的值加1。
输入(input)  计算所要使用的值，例如函数实参或用键盘敲入的字符。
迭代(iteration)  遍历一个数据结构的一系列元素。
循环(loop)  重复执行的一段代码，例如for语句或while语句。
左值(lvalue)  可以出现在赋值运算符左边的表达式，例如x、v[1]。
成员函数(member function)  在类中声明的函数。
输出(output)  计算生成的值，例如函数返回值或写到屏幕的一行字符。
push_back()  标准库容器将一个元素添加到尾部的成员函数。
重复(repetition)  重复执行某些操作。
右值(rvalue)  可以出现在赋值运算符右边，不能出现在左边的表达式，例如x+1、++p。
选择(selection)  根据条件执行不同的操作。
size()  标准库容器返回其大小（元素个数）的成员函数。
sort()  标准库排序算法。
语句(statement)  控制执行流程的基本单元，例如表达式语句、if语句、switch语句、for语句、while语句、声明等。
switch语句(switch-statement)  根据整数值在多个候选分支中进行选择的语句。
向量(vector)  提供连续存储、支持动态添加元素的标准库容器。
while语句(while-statement)  在开头指定循环条件的循环语句。

第5章
参数错误(argument error)  参数不满足函数的要求导致的错误。
断言(assertion)  插入程序中的语句，声明在此处某些条件必须为真。
catch  try-catch语句的一部分，处理一种特定类型的异常，也叫异常处理器。
编译时错误(compile-time error)  由编译器发现的错误，例如语法错误、类型错误。
容器(container)  容纳元素（其他对象）的对象，标准库容器包括vector、list、map等。
调试(debugging)  搜索、排除程序中错误的过程。
错误(error)  程序的实际行为与期望的不匹配。
异常(exception)  C++提供的错误处理机制；标准库提供的异常类型的基类。
不变式(invariant)  在程序某个位置必须始终成立的条件。
链接时错误(link-time error)  链接器将对象文件链接为可执行程序时发现的错误。
逻辑错误(logic error)  程序没有按照期望的方式运行。
后置条件(post-condition)  在退出一段代码（函数或循环）时必须成立的条件。
前置条件(pre-condition)  在进入一段代码（函数或循环）时必须成立的条件。
范围错误(range error)  访问容器元素时下标超过合法范围导致的错误，例如vector::at()函数。
需求(requirement)  对于程序期望行为的描述；函数对于其参数作出的假设。
运行时错误(run-time error)  程序运行中发现的错误。
语法错误(syntax error)  代码不符合C++语法规范导致的错误，属于编译错误的一种。
测试(testing)  查找程序中错误的系统化方法。
throw  用于抛出异常的关键字。
类型错误(type error)  赋值给变量、传递给函数参数的值或表达式的类型与声明的不匹配导致的错误，属于编译错误的一种。

第6章
分析(analysis)  程序开发的第一个阶段，明确需求，给出对问题理解的描述，并编写需求规格说明书。
class  用户自定义类型，可以包含数据成员、成员函数和成员类型；用户自定义类型的关键字。
类成员(class member)  在类中声明的变量、常量、函数或类型。
数据成员(data member)  在类中声明的变量。
设计(design)  程序开发的第二个阶段，给出系统的整体结构图，并确定实现包括哪些部分以及这些部分之间如何相互联系。
除以零(divide by zero)  除数为0。
文法(grammar)  一种描述形式语言的工具，由非终结符集合、终结符集合、产生式规则集合和开始符号四部分组成。
实现(implementation)  程序开发的第三个阶段，编写代码、调试和测试，确保程序完成预期的功能。
接口(interface)  一组声明，定义了一段代码如何被使用。例如，类的公有成员定义了该类的接口。
成员函数(member function)  在类中声明的函数。
语法分析器(parser)  负责按照文法的产生式规则将终结符序列构造成语法分析树的程序。
private  类成员可见性关键字。类的私有成员只能被该类（相同或不同对象）的成员和友元访问。
原型(prototype)  小的、有限的程序，用来解决问题的关键部分。
伪代码(pseudo code)  用非正式的表示方法，而非编程语言描述的计算。
public  类成员可见性关键字。类的公有成员在任何地方都可以访问。
语法分析器(syntax analyzer)  同parser。
单词(token)  文法中的终结符，例如表达式文法中的"+"、"("、浮点数等。
用例(use case)  程序的特定（通常是简单的）使用方式，可以测试程序的功能、展示其目的。
